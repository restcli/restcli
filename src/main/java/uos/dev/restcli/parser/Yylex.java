/* The following code was generated by JFlex 1.7.0 */

package uos.dev.restcli.parser;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lexer.flex</tt>
 */
@SuppressWarnings("ALL") public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S_REQUEST_SEPARATOR = 2;
  public static final int S_SCRIPT_INIT = 4;
  public static final int S_REQUEST_LINE = 6;
  public static final int S_HEADER = 8;
  public static final int S_BODY = 10;
  public static final int S_MULTILE_PART = 12;
  public static final int S_SCRIPT_HANDLER = 14;
  public static final int S_RESPONSE_REFERENCE = 16;
  public static final int S_MULTIPLE_PART_HEADER = 18;
  public static final int S_MULTIPLE_PART_BODY = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\1\62\1\5\1\3\22\0\1\4\2\0\1\6"+
    "\1\0\1\57\7\0\1\13\1\53\1\7\12\2\1\54\1\0\1\55"+
    "\1\32\1\61\1\0\1\10\1\40\1\33\1\47\1\41\1\35\1\33"+
    "\1\34\1\37\1\51\2\33\1\46\1\33\1\50\1\43\1\42\1\33"+
    "\1\52\1\44\1\36\1\45\5\33\4\0\1\33\1\0\1\24\1\33"+
    "\1\20\1\16\1\15\1\33\1\26\1\33\1\17\1\23\1\22\1\25"+
    "\1\31\1\11\1\12\2\33\1\14\1\30\1\21\1\27\5\33\1\56"+
    "\1\0\1\60\7\0\1\62\32\0\1\62\u15df\0\1\62\u097f\0\13\62"+
    "\35\0\2\62\5\0\1\62\57\0\1\62\u0fa0\0\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\1\1\3\2\4\2\3\3\5"+
    "\1\6\2\7\1\10\1\11\10\6\1\12\3\13\3\12"+
    "\1\14\2\15\12\14\3\16\3\17\1\11\2\20\2\11"+
    "\7\16\16\0\2\21\3\0\1\6\1\0\12\6\1\0"+
    "\1\22\3\0\1\22\1\0\2\23\14\0\1\24\17\0"+
    "\2\25\1\0\1\6\1\0\11\6\1\0\2\26\2\27"+
    "\1\0\2\30\1\0\2\31\2\32\1\0\2\33\4\0"+
    "\2\34\11\0\2\35\3\0\1\6\1\0\10\6\1\22"+
    "\1\30\1\0\2\36\1\24\1\34\11\0\2\25\1\0"+
    "\1\6\1\0\1\6\2\37\5\6\2\33\11\0\1\40"+
    "\1\6\1\0\4\6\2\0\1\41\7\0\2\40\1\6"+
    "\1\0\3\6\2\41\6\0\1\6\1\0\2\6\1\42"+
    "\6\0\1\43\1\42\2\6\2\0\2\44\2\45\2\0"+
    "\2\6\3\0\1\43\1\6\3\0\1\43\6\0\2\46"+
    "\4\0\2\47\5\0\2\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u02fd\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u02fd"+
    "\0\u0363\0\u0462\0\u0495\0\u02fd\0\u04c8\0\u04fb\0\u02fd\0\u052e"+
    "\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u02fd"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u02fd\0\u0990"+
    "\0\u042f\0\u09c3\0\u09f6\0\u02fd\0\u0363\0\u0a29\0\u02fd\0\u0363"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u07f8\0\u082b\0\u0891"+
    "\0\u08c4\0\u08f7\0\u0b5b\0\u092a\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\u042f\0\u02fd\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1"+
    "\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089"+
    "\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u06c6\0\u02fd\0\u1188\0\u07c5"+
    "\0\u11bb\0\u0e25\0\u07f8\0\u02fd\0\u11ee\0\u082b\0\u0891\0\u08f7"+
    "\0\u1221\0\u1254\0\u1287\0\u0990\0\u12ba\0\u12ed\0\u1320\0\u1353"+
    "\0\u0a8f\0\u02fd\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485"+
    "\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u0d59\0\u1584\0\u15b7\0\u15ea"+
    "\0\u161d\0\u02fd\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f"+
    "\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7"+
    "\0\u02fd\0\u191a\0\u02fd\0\u194d\0\u1980\0\u02fd\0\u19b3\0\u19e6"+
    "\0\u02fd\0\u1a19\0\u02fd\0\u1a4c\0\u1a7f\0\u02fd\0\u1ab2\0\u1ae5"+
    "\0\u1b18\0\u1b4b\0\u1b7e\0\u02fd\0\u1bb1\0\u1be4\0\u02fd\0\u1c17"+
    "\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u02fd\0\u1d7c"+
    "\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14"+
    "\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u15b7\0\u1980\0\u2046"+
    "\0\u02fd\0\u2079\0\u15b7\0\u1b7e\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd"+
    "\0\u2310\0\u2343\0\u2376\0\u02fd\0\u23a9\0\u23dc\0\u240f\0\u2442"+
    "\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da"+
    "\0\u260d\0\u2640\0\u2673\0\u2277\0\u26a6\0\u26d9\0\u270c\0\u273f"+
    "\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u24db\0\u283e\0\u2871\0\u28a4"+
    "\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c"+
    "\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4"+
    "\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c"+
    "\0\u2d9f\0\u2b3b\0\u02fd\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e"+
    "\0\u2d06\0\u2d39\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u02fd\0\u2f9d"+
    "\0\u02fd\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102"+
    "\0\u3135\0\u3069\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3168\0\u3234"+
    "\0\u3267\0\u329a\0\u32cd\0\u3300\0\u3333\0\u02fd\0\u3366\0\u3399"+
    "\0\u33cc\0\u33ff\0\u3432\0\u02fd\0\u3465\0\u3498\0\u34cb\0\u34fe"+
    "\0\u3531\0\u3564\0\u02fd\0\u3597";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\20\3\21\1\22\54\20\1\23\1\24"+
    "\1\23\1\24\1\25\1\24\1\26\1\27\53\23\6\30"+
    "\1\31\46\30\1\32\5\30\1\33\1\34\1\33\1\35"+
    "\1\36\1\37\1\40\25\33\1\41\1\33\1\42\1\43"+
    "\1\33\1\44\1\45\1\46\3\33\1\47\12\33\1\37"+
    "\1\50\1\51\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\44\50\1\56\6\50\1\57\1\60\1\57\1\61\1\62"+
    "\1\57\1\63\1\64\45\57\1\65\3\57\1\66\1\57"+
    "\4\67\1\70\1\67\1\63\1\71\3\67\1\72\41\67"+
    "\1\73\5\67\6\74\1\75\52\74\1\76\1\74\6\77"+
    "\1\100\46\77\1\101\5\77\1\102\1\103\1\102\1\103"+
    "\2\104\1\105\45\102\1\106\6\102\1\107\1\60\1\107"+
    "\1\61\1\110\1\107\1\111\1\112\3\107\1\113\41\107"+
    "\1\114\3\107\1\115\1\107\34\0\1\116\1\0\1\117"+
    "\1\120\1\0\1\121\1\122\1\123\3\0\1\124\14\0"+
    "\1\125\1\0\1\126\57\0\1\127\1\0\1\127\3\0"+
    "\54\127\3\0\1\130\144\0\1\21\1\0\3\21\63\0"+
    "\1\131\55\0\1\24\1\0\3\24\56\0\1\24\1\0"+
    "\1\24\1\25\1\24\1\132\1\133\53\0\1\132\1\134"+
    "\1\132\1\135\1\136\1\132\1\137\54\132\7\0\1\132"+
    "\57\0\1\140\56\0\1\33\1\0\1\33\1\0\33\33"+
    "\1\141\23\33\1\0\1\34\65\0\1\36\32\0\1\142"+
    "\23\0\1\33\1\0\1\33\1\0\2\33\1\143\30\33"+
    "\1\141\24\33\1\0\1\33\1\0\31\33\1\144\1\33"+
    "\1\141\24\33\1\0\1\33\1\0\33\33\1\141\12\33"+
    "\1\145\11\33\1\0\1\33\1\0\31\33\1\146\1\147"+
    "\1\141\24\33\1\0\1\33\1\0\31\33\1\150\1\33"+
    "\1\141\24\33\1\0\1\33\1\0\33\33\1\141\1\151"+
    "\2\33\1\152\1\33\1\144\16\33\1\0\1\33\1\0"+
    "\33\33\1\141\2\33\1\153\21\33\1\0\1\33\1\0"+
    "\33\33\1\141\3\33\1\154\17\33\1\155\1\0\1\155"+
    "\1\0\50\155\1\156\6\155\1\0\1\51\1\0\3\51"+
    "\55\0\1\155\1\51\1\155\1\51\1\52\1\53\1\157"+
    "\1\160\44\155\1\156\7\155\1\51\1\155\1\51\2\53"+
    "\46\155\1\156\6\155\1\157\1\134\1\157\1\135\2\157"+
    "\1\161\45\157\1\162\6\157\1\155\1\0\1\155\1\0"+
    "\3\155\1\157\44\155\1\156\6\155\1\163\1\164\1\163"+
    "\1\165\57\163\1\166\1\60\1\166\1\61\57\166\1\0"+
    "\1\60\61\0\1\166\1\60\1\166\1\61\1\167\1\166"+
    "\1\132\1\170\53\166\1\132\1\134\1\132\1\135\2\132"+
    "\1\137\54\132\1\166\1\60\1\166\1\61\3\166\1\132"+
    "\54\166\1\60\1\166\1\61\1\171\54\166\1\172\2\166"+
    "\1\60\1\166\1\61\1\173\56\166\4\0\1\174\1\0"+
    "\1\132\1\133\66\0\1\175\130\0\1\176\5\0\1\177"+
    "\137\0\1\200\1\0\1\201\1\0\1\201\1\0\50\201"+
    "\1\202\6\201\1\0\1\103\1\0\3\103\55\0\1\201"+
    "\1\103\1\201\1\103\2\104\46\201\1\202\7\201\1\0"+
    "\1\201\1\0\2\201\1\203\45\201\1\202\6\201\1\166"+
    "\1\60\1\166\1\61\7\166\1\175\50\166\1\60\1\166"+
    "\1\61\1\204\56\166\35\0\1\205\77\0\1\206\45\0"+
    "\1\207\62\0\1\210\65\0\1\211\2\0\1\212\1\0"+
    "\1\205\57\0\1\213\63\0\1\214\17\0\1\126\1\0"+
    "\2\126\1\215\57\126\1\0\1\126\1\0\1\215\56\126"+
    "\1\127\1\0\1\127\1\0\57\127\2\0\1\130\50\0"+
    "\1\216\15\0\1\217\54\0\1\132\1\134\1\132\1\135"+
    "\57\132\1\0\1\134\61\0\1\132\1\134\1\132\1\135"+
    "\1\136\3\132\1\220\53\132\1\134\1\132\1\135\2\132"+
    "\1\217\54\132\1\221\1\222\1\221\1\223\1\140\51\221"+
    "\1\224\4\221\1\33\1\0\1\33\1\0\32\33\1\225"+
    "\1\141\23\33\36\0\1\226\24\0\1\33\1\0\1\33"+
    "\1\0\2\33\1\227\30\33\1\141\24\33\1\0\1\33"+
    "\1\0\32\33\1\230\1\141\24\33\1\0\1\33\1\0"+
    "\33\33\1\141\1\231\23\33\1\0\1\33\1\0\33\33"+
    "\1\141\1\232\23\33\1\0\1\33\1\0\32\33\1\233"+
    "\1\141\24\33\1\0\1\33\1\0\33\33\1\141\6\33"+
    "\1\234\15\33\1\0\1\33\1\0\32\33\1\235\1\141"+
    "\24\33\1\0\1\33\1\0\33\33\1\141\4\33\1\144"+
    "\17\33\1\0\1\33\1\0\32\33\1\236\1\141\24\33"+
    "\1\0\1\33\1\0\33\33\1\141\10\33\1\237\12\33"+
    "\1\157\1\134\1\157\1\135\50\157\1\162\7\157\1\134"+
    "\1\157\1\135\2\157\1\240\45\157\1\162\6\157\1\0"+
    "\1\164\61\0\1\171\1\241\1\171\1\242\57\171\1\172"+
    "\1\243\1\172\1\244\57\172\1\245\1\246\1\245\1\247"+
    "\1\173\51\245\1\250\4\245\1\175\1\251\1\175\1\252"+
    "\57\175\1\176\1\253\1\176\1\254\57\176\1\255\1\256"+
    "\1\255\1\257\1\177\51\255\1\260\4\255\4\0\1\261"+
    "\56\0\1\201\1\0\1\201\1\0\2\201\1\262\45\201"+
    "\1\202\6\201\1\263\1\264\1\263\1\265\1\204\51\263"+
    "\1\266\4\263\36\0\1\267\64\0\1\270\62\0\1\271"+
    "\70\0\1\272\52\0\1\273\70\0\1\205\54\0\1\274"+
    "\74\0\1\275\14\0\1\276\60\0\1\217\1\277\1\217"+
    "\1\300\57\217\1\132\1\134\1\132\1\135\5\132\1\301"+
    "\15\132\1\302\33\132\1\221\1\222\1\221\1\223\57\221"+
    "\1\0\1\222\61\0\1\221\1\222\1\221\1\223\53\221"+
    "\1\303\3\221\1\33\1\0\1\33\1\0\32\33\1\304"+
    "\1\141\23\33\36\0\1\305\24\0\1\227\1\277\1\227"+
    "\1\300\33\227\1\306\23\227\1\33\1\0\1\33\1\0"+
    "\1\307\32\33\1\141\24\33\1\0\1\33\1\0\33\33"+
    "\1\141\7\33\1\310\14\33\1\0\1\33\1\0\33\33"+
    "\1\141\1\33\1\230\22\33\1\0\1\33\1\0\33\33"+
    "\1\141\2\33\1\311\21\33\1\0\1\33\1\0\31\33"+
    "\1\312\1\33\1\141\24\33\1\0\1\33\1\0\33\33"+
    "\1\141\7\33\1\313\14\33\1\0\1\33\1\0\33\33"+
    "\1\141\11\33\1\314\12\33\1\0\1\33\1\0\33\33"+
    "\1\141\10\33\1\315\12\33\1\240\1\277\1\240\1\300"+
    "\50\240\1\316\6\240\1\0\1\241\62\0\1\243\61\0"+
    "\1\245\1\246\1\245\1\247\57\245\1\0\1\246\61\0"+
    "\1\245\1\246\1\245\1\247\53\245\1\317\3\245\1\0"+
    "\1\251\62\0\1\253\61\0\1\255\1\256\1\255\1\257"+
    "\57\255\1\0\1\256\61\0\1\255\1\256\1\255\1\257"+
    "\53\255\1\320\3\255\1\261\1\321\1\261\1\322\57\261"+
    "\1\262\1\277\1\262\1\300\50\262\1\323\6\262\1\263"+
    "\1\264\1\263\1\265\57\263\1\0\1\264\61\0\1\263"+
    "\1\264\1\263\1\265\53\263\1\324\3\263\47\0\1\325"+
    "\54\0\1\267\56\0\1\326\74\0\1\327\64\0\1\330"+
    "\61\0\1\331\14\0\1\276\4\0\1\332\54\0\1\277"+
    "\61\0\1\132\1\134\1\132\1\135\6\132\1\333\11\132"+
    "\1\334\37\132\1\134\1\132\1\135\24\132\1\335\32\132"+
    "\1\303\1\336\1\303\1\337\53\303\1\340\3\303\1\33"+
    "\1\0\1\33\1\0\33\33\1\141\2\33\1\341\20\33"+
    "\42\0\1\342\20\0\1\227\1\277\1\227\1\300\32\227"+
    "\1\343\1\306\23\227\1\307\1\344\1\307\1\345\33\307"+
    "\1\346\23\307\1\33\1\0\1\33\1\0\31\33\1\230"+
    "\1\33\1\141\24\33\1\0\1\33\1\0\3\33\1\347"+
    "\27\33\1\141\24\33\1\0\1\33\1\0\32\33\1\310"+
    "\1\141\24\33\1\0\1\33\1\0\33\33\1\350\24\33"+
    "\1\0\1\33\1\0\33\33\1\141\3\33\1\351\20\33"+
    "\1\0\1\33\1\0\31\33\1\352\1\33\1\141\23\33"+
    "\1\320\1\353\1\320\1\354\53\320\1\355\3\320\1\0"+
    "\1\321\116\0\1\267\63\0\1\325\63\0\1\267\66\0"+
    "\1\356\54\0\1\357\67\0\1\360\20\0\1\132\1\134"+
    "\1\132\1\135\7\132\1\361\50\132\1\134\1\132\1\135"+
    "\25\132\1\362\32\132\1\134\1\132\1\135\11\132\1\363"+
    "\45\132\57\364\1\365\4\364\1\336\55\364\1\365\3\364"+
    "\1\303\1\336\1\303\1\337\53\303\1\340\1\366\2\303"+
    "\1\33\1\0\1\33\1\0\3\33\1\367\27\33\1\141"+
    "\23\33\7\0\1\370\53\0\1\227\1\277\1\227\1\300"+
    "\32\227\1\371\1\306\23\227\1\0\1\344\61\0\1\307"+
    "\1\344\1\307\1\345\32\307\1\372\1\346\23\307\1\33"+
    "\1\0\1\373\1\0\33\33\1\141\24\33\1\0\1\33"+
    "\1\0\1\307\31\33\1\225\1\141\24\33\1\0\1\33"+
    "\1\0\33\33\1\141\10\33\1\374\13\33\1\0\1\33"+
    "\1\0\33\33\1\141\7\33\1\144\13\33\57\375\1\376"+
    "\4\375\1\353\55\375\1\376\3\375\1\320\1\353\1\320"+
    "\1\354\53\320\1\355\1\377\2\320\50\0\1\u0100\61\0"+
    "\1\205\51\0\1\u0101\24\0\1\132\1\134\1\132\1\135"+
    "\10\132\1\u0102\3\132\1\u0103\4\132\1\u0104\36\132\1\134"+
    "\1\132\1\135\11\132\1\u0105\46\132\1\134\1\132\1\135"+
    "\7\132\1\u0106\47\132\57\364\1\365\1\u0107\2\364\1\221"+
    "\1\u0108\1\221\1\u0108\1\366\56\221\1\33\1\0\1\u0109"+
    "\1\0\33\33\1\141\23\33\2\0\1\u010a\60\0\1\227"+
    "\1\277\1\227\1\300\33\227\1\306\2\227\1\u010b\20\227"+
    "\1\307\1\344\1\307\1\345\32\307\1\u010c\1\346\23\307"+
    "\1\33\1\0\1\373\1\0\33\33\1\141\13\33\1\u010d"+
    "\10\33\1\0\1\33\1\0\33\33\1\141\4\33\1\230"+
    "\16\33\57\375\1\376\1\u010e\2\375\1\255\1\u010f\1\255"+
    "\1\u010f\1\377\56\255\44\0\1\267\54\0\1\u0110\24\0"+
    "\1\132\1\134\1\132\1\135\11\132\1\u0111\46\132\1\134"+
    "\1\132\1\135\6\132\1\u0112\51\132\1\134\1\132\1\135"+
    "\6\132\1\u0113\51\132\1\134\1\132\1\135\26\132\1\u0114"+
    "\31\132\1\134\1\132\1\135\6\132\1\u0115\50\132\1\0"+
    "\1\u0108\1\0\1\u0108\1\u0107\57\0\1\u0108\1\0\1\u0108"+
    "\57\0\1\33\1\0\1\u0109\1\0\33\33\1\141\13\33"+
    "\1\u0116\7\33\2\0\1\u010a\50\0\1\u0117\7\0\1\227"+
    "\1\277\1\227\1\300\3\227\1\u0118\27\227\1\306\23\227"+
    "\1\307\1\344\1\307\1\345\33\307\1\346\2\307\1\u0119"+
    "\20\307\1\33\1\0\1\u011a\1\0\33\33\1\141\23\33"+
    "\1\0\1\u010f\1\0\1\u010f\1\u010e\57\0\1\u010f\1\0"+
    "\1\u010f\116\0\1\u011b\23\0\1\132\1\134\1\132\1\135"+
    "\12\132\1\u011c\45\132\1\134\1\132\1\135\6\132\1\u011d"+
    "\51\132\1\134\1\132\1\135\22\132\1\u011e\35\132\1\134"+
    "\1\132\1\135\5\132\2\u011f\1\132\16\u011f\1\132\20\u011f"+
    "\11\132\1\134\1\132\1\135\24\132\1\u0120\32\132\1\33"+
    "\1\0\1\u0121\1\0\33\33\1\141\23\33\2\0\1\u0122"+
    "\60\0\1\227\1\277\1\u0123\1\300\33\227\1\306\23\227"+
    "\1\307\1\344\1\307\1\345\3\307\1\u0124\27\307\1\346"+
    "\23\307\1\132\1\134\1\132\1\135\13\132\1\u0125\44\132"+
    "\1\134\1\132\1\135\16\132\1\u0126\41\132\1\u0127\1\132"+
    "\1\u0128\1\u011e\57\132\1\u0129\1\u011f\1\u012a\1\u012b\4\132"+
    "\21\u011f\1\132\20\u011f\11\132\1\134\1\132\1\135\7\132"+
    "\1\u012c\47\132\1\227\1\277\1\u0123\1\300\33\227\1\306"+
    "\13\227\1\u012d\7\227\1\307\1\344\1\u012e\1\345\33\307"+
    "\1\346\23\307\1\132\1\134\1\132\1\135\10\132\1\u012f"+
    "\47\132\1\134\1\132\1\135\13\132\1\u0130\43\132\1\0"+
    "\1\u0127\62\0\1\u0129\61\0\1\132\1\u0129\1\132\1\u012a"+
    "\1\u012b\57\132\1\134\1\132\1\135\14\132\1\u0131\42\132"+
    "\1\227\1\277\1\u0132\1\300\33\227\1\306\23\227\1\307"+
    "\1\344\1\u012e\1\345\33\307\1\346\13\307\1\u0133\7\307"+
    "\1\132\1\134\1\132\1\135\11\132\1\u0134\46\132\1\134"+
    "\1\132\1\135\11\132\1\u0135\46\132\1\134\1\132\1\135"+
    "\10\132\1\u0136\46\132\1\307\1\344\1\u0137\1\345\33\307"+
    "\1\346\23\307\1\132\1\134\1\132\1\135\14\132\1\u0138"+
    "\43\132\1\134\1\132\1\135\7\132\1\u0139\50\132\1\134"+
    "\1\132\1\135\11\132\1\u013a\46\132\1\134\1\132\1\135"+
    "\15\132\1\u013b\42\132\1\134\1\132\1\135\17\132\1\u013c"+
    "\40\132\1\134\1\132\1\135\12\132\1\u013d\45\132\1\u013e"+
    "\1\132\1\u013f\1\u013b\57\132\1\134\1\132\1\135\20\132"+
    "\1\u0140\37\132\1\134\1\132\1\135\11\132\1\u0141\45\132"+
    "\1\0\1\u013e\61\0\1\132\1\134\1\132\1\135\10\132"+
    "\1\u0142\47\132\1\134\1\132\1\135\5\132\1\u0143\52\132"+
    "\1\u0144\1\132\1\u0145\1\u0142\57\132\1\134\1\132\1\135"+
    "\15\132\1\u0146\41\132\1\0\1\u0144\61\0\1\132\1\134"+
    "\1\132\1\135\13\132\1\u0147\44\132\1\134\1\132\1\135"+
    "\20\132\1\u0148\37\132\1\134\1\132\1\135\21\132\1\u0149"+
    "\36\132\1\134\1\132\1\135\24\132\1\u014a\33\132\1\u014b"+
    "\1\132\1\u014c\1\u014a\56\132\1\0\1\u014b\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13770];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\11\2\1\1\11\4\1\1\11\3\1\1\11"+
    "\2\1\1\11\20\1\1\11\6\1\1\11\4\1\1\11"+
    "\2\1\1\11\16\1\11\0\1\1\4\0\1\11\1\1"+
    "\3\0\1\1\1\0\12\1\1\0\1\11\3\0\1\1"+
    "\1\0\1\11\1\1\14\0\1\11\12\0\1\1\4\0"+
    "\1\11\1\1\1\0\1\1\1\0\11\1\1\0\1\11"+
    "\1\1\1\11\1\1\1\0\1\11\1\1\1\0\1\11"+
    "\1\1\1\11\1\1\1\0\1\11\1\1\4\0\1\11"+
    "\1\1\1\0\1\11\7\0\1\11\1\1\3\0\1\1"+
    "\1\0\12\1\1\0\1\11\3\1\11\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\10\1\11\0\2\1\1\0"+
    "\4\1\2\0\1\1\7\0\3\1\1\0\5\1\6\0"+
    "\1\1\1\0\3\1\1\11\5\0\4\1\2\0\1\11"+
    "\1\1\1\11\1\1\2\0\2\1\3\0\2\1\3\0"+
    "\1\1\6\0\1\11\1\1\4\0\1\11\1\1\5\0"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
private static final boolean DEBUG = false;
private boolean hasRequestTarget = false;
private boolean isMultiplePart = false;
private int previousState = -1;
private String currentFieldName = null;
private boolean isNewPartRequired = false;

public int getPreviousState() {
  return previousState;
}

private void switchState(int newState) {
  previousState = yystate();
  yybegin(newState);
}

private void reset() {
    hasRequestTarget = false;
    isMultiplePart = false;
    currentFieldName = null;
    isNewPartRequired = false;
}

public boolean isMultiplePart() {
    return isMultiplePart;
}

public boolean isNewPartRequired() {
    return isNewPartRequired;
}

public void resetNewPartRequired() {
    isNewPartRequired = false;
}

private void throwError() throws ParserException {
    throw new ParserException("Error while parsing: " + yytext());
}

private Yytoken createTokenWithoutValue(TokenType type) {
  return new Yytoken(type);
}

private Yytoken createTokenNormal(TokenType type) {
  return new Yytoken(type, yytext());
}

private Yytoken createTokenTrimmed(TokenType type) {
  return new Yytoken(type, yytext().trim());
}

private Yytoken createTokenRequestName() {
  String text = yytext();
  String nameField = "@name=";
  int index = text.indexOf(nameField);
  if (index < 0) {
    throwError();
  }
  int start = index + nameField.length();
  String requestName = text.substring(start).trim();
  return new Yytoken(TokenType.TYPE_REQUEST_NAME, requestName);
}

private Yytoken createTokenMessageLineFile() {
  if (yytext().charAt(0) != '<') {
    throwError();
  }
  String filePath = yytext().trim().substring(1).trim();
  return new Yytoken(TokenType.TYPE_BODY_FILE_REF, filePath);
}

private Yytoken createTokenHandlerFileScript() {
  if (yytext().charAt(0) != '>') {
    throwError();
  }
  String filePath = yytext().trim().substring(1).trim();
  return new Yytoken(TokenType.TYPE_HANDLER_FILE_SCRIPT, filePath, yyline);
}

private Yytoken createTokenInitFileScript() {
  if (yytext().charAt(0) != '>') {
    throwError();
  }
  String filePath = yytext().trim().substring(1).trim();
  return new Yytoken(TokenType.TYPE_INIT_FILE_SCRIPT, filePath, yyline);
}

private Yytoken createAndSaveFieldNameToken(TokenType type) {
  String fieldName = yytext().trim();
  currentFieldName = fieldName;
  return new Yytoken(type, fieldName);
}

private Yytoken createTokenEmbeddedScriptHandler() {
  String text = yytext();
  String openScript = "{%";
  String closeScript = "%" + "}";
  int start = text.indexOf(openScript) + openScript.length();
  int end = text.lastIndexOf(closeScript);
  String script = text.substring(start, end).trim();
  return new Yytoken(TokenType.TYPE_HANDLER_EMBEDDED_SCRIPT, script, yyline);
}

private Yytoken createTokenEmbeddedScriptInit() {
  String text = yytext();
  String openScript = "{%";
  String closeScript = "%" + "}";
  int start = text.indexOf(openScript) + openScript.length();
  int end = text.lastIndexOf(closeScript);
  String script = text.substring(start, end).trim();
  return new Yytoken(TokenType.TYPE_INIT_EMBEDDED_SCRIPT, script, yyline);
}

private Yytoken createFieldValueToken() {
  String fieldValueWithColonPrefix = yytext().trim();
  String fieldValue = fieldValueWithColonPrefix.replaceFirst(": *", "");
  boolean isContentTypeHeader = "Content-Type".equalsIgnoreCase(currentFieldName);
  if (isContentTypeHeader && yystate() == S_HEADER) {
    isMultiplePart = fieldValue.toLowerCase().contains("multipart/form-data;");
  }
  return new Yytoken(TokenType.TYPE_FIELD_VALUE, fieldValue);
}

private static final void T(String text) {
  if (DEBUG) {
    System.out.println(text);
  }
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException, ParserException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { T("In YYINITIAL but got " + yytext() + " switch to S_REQUEST_LINE");
                                             yypushback(yylength());
                                             switchState(S_SCRIPT_INIT);
            } 
            // fall through
          case 41: break;
          case 2: 
            { T("Ignore any space in YYINITIAL");
            } 
            // fall through
          case 42: break;
          case 3: 
            { yypushback(yylength()); switchState(S_SCRIPT_INIT);
            } 
            // fall through
          case 43: break;
          case 4: 
            { T("Ignore any space in S_REQUEST_SEPARATOR");
            } 
            // fall through
          case 44: break;
          case 5: 
            { yypushback(yylength()); switchState(S_REQUEST_LINE);
            } 
            // fall through
          case 45: break;
          case 6: 
            { hasRequestTarget = true; return createTokenTrimmed(TokenType.TYPE_REQUEST_TARGET);
            } 
            // fall through
          case 46: break;
          case 7: 
            { if (!hasRequestTarget) throwError(); switchState(S_HEADER);
            } 
            // fall through
          case 47: break;
          case 8: 
            { T("Ignore {WhiteSpace}+ in S_REQUEST_LINE");
            } 
            // fall through
          case 48: break;
          case 9: 
            { throwError();
            } 
            // fall through
          case 49: break;
          case 10: 
            { T("State S_HEADER fallback for: " + yytext());
                                             yypushback(yylength());
                                             switchState(YYINITIAL);
            } 
            // fall through
          case 50: break;
          case 11: 
            { if (isMultiplePart) switchState(S_MULTILE_PART); else switchState(S_BODY);
            } 
            // fall through
          case 51: break;
          case 12: 
            { T("State S_BODY falback for: " + yytext());
                                             yypushback(yylength());
                                             switchState(YYINITIAL);
            } 
            // fall through
          case 52: break;
          case 13: 
            { return createTokenNormal(TokenType.TYPE_BODY_MESSAGE);
            } 
            // fall through
          case 53: break;
          case 14: 
            { yypushback(yylength()); switchState(S_SCRIPT_HANDLER);
            } 
            // fall through
          case 54: break;
          case 15: 
            { T("In S_RESPONSE_REFERENCE but got " + yytext() + " -> switch to YYINITIAL"); yypushback(yylength()); switchState(YYINITIAL);
            } 
            // fall through
          case 55: break;
          case 16: 
            { switchState(S_MULTIPLE_PART_BODY);
            } 
            // fall through
          case 56: break;
          case 17: 
            { return createTokenNormal(TokenType.TYPE_COMMENT);
            } 
            // fall through
          case 57: break;
          case 18: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return createAndSaveFieldNameToken(TokenType.TYPE_FIELD_NAME);
            } 
            // fall through
          case 58: break;
          case 19: 
            { return createFieldValueToken();
            } 
            // fall through
          case 59: break;
          case 20: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return createTokenTrimmed(TokenType.TYPE_FIELD_NAME);
            } 
            // fall through
          case 60: break;
          case 21: 
            { switchState(S_REQUEST_LINE);
                                             return createTokenInitFileScript();
            } 
            // fall through
          case 61: break;
          case 22: 
            { return createTokenMessageLineFile();
            } 
            // fall through
          case 62: break;
          case 23: 
            { T("State S_BODY but got <>.* => fallback to response reference");
                                             yypushback(yylength());
                                             switchState(S_RESPONSE_REFERENCE);
            } 
            // fall through
          case 63: break;
          case 24: 
            { T("State S_BODY but got response handler -> switch state to S_SCRIPT_HANDLER");
                                             yypushback(yylength());
                                             switchState(S_SCRIPT_HANDLER);
            } 
            // fall through
          case 64: break;
          case 25: 
            { isNewPartRequired = true; switchState(S_MULTIPLE_PART_HEADER);
            } 
            // fall through
          case 65: break;
          case 26: 
            { T("State S_BODY_MULTILE_PART but got <>.* => fallback to response reference");
                                             yypushback(yylength());
                                             switchState(S_RESPONSE_REFERENCE);
            } 
            // fall through
          case 66: break;
          case 27: 
            { switchState(S_RESPONSE_REFERENCE);
                                             return createTokenHandlerFileScript();
            } 
            // fall through
          case 67: break;
          case 28: 
            { T("State S_BODY but got response handler -> switch state to S_SCRIPT_HANDLER");
                                               yypushback(yylength());
                                               switchState(S_SCRIPT_HANDLER);
            } 
            // fall through
          case 68: break;
          case 29: 
            { reset();
                                             switchState(S_REQUEST_SEPARATOR);
                                             return createTokenTrimmed(TokenType.TYPE_SEPARATOR);
            } 
            // fall through
          case 69: break;
          case 30: 
            { return createTokenNormal(TokenType.TYPE_RESPONSE_REFERENCE);
            } 
            // fall through
          case 70: break;
          case 31: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 11;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 12;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { return createTokenTrimmed(TokenType.TYPE_REQUEST_METHOD);
            } 
            // fall through
          case 71: break;
          case 32: 
            { switchState(S_REQUEST_LINE);
                                             return createTokenEmbeddedScriptInit();
            } 
            // fall through
          case 72: break;
          case 33: 
            { switchState(S_RESPONSE_REFERENCE);
                                             return createTokenEmbeddedScriptHandler();
            } 
            // fall through
          case 73: break;
          case 34: 
            { return createTokenTrimmed(TokenType.TYPE_REQUEST_HTTP_VERSION);
            } 
            // fall through
          case 74: break;
          case 35: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 13;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 14;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { hasRequestTarget = true; return createTokenTrimmed(TokenType.TYPE_REQUEST_TARGET);
            } 
            // fall through
          case 75: break;
          case 36: 
            { return createTokenWithoutValue(TokenType.TYPE_NO_LOG);
            } 
            // fall through
          case 76: break;
          case 37: 
            { return createTokenRequestName();
            } 
            // fall through
          case 77: break;
          case 38: 
            { return createTokenWithoutValue(TokenType.TYPE_NO_REDIRECT);
            } 
            // fall through
          case 78: break;
          case 39: 
            { return createTokenWithoutValue(TokenType.TYPE_NO_COOKIE_JAR);
            } 
            // fall through
          case 79: break;
          case 40: 
            { return createTokenWithoutValue(TokenType.TYPE_USE_OS_CREDENTIALS);
            } 
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
